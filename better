#!/bin/bash
# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run as root"
    exit 1
fi

# Variables
SNAPSHOT_DIR="/.snapshots"  # Directory where snapshots are stored
ROOT_SUBVOL="/"
DATE=$(date +"%Y-%m-%d_%H-%M-%S")
UUID=$(blkid -s UUID -o value /dev/vda2)  # Change /dev/vda2 to your root partition
BOOT_LOADER_DIR="/boot/loader/entries"

# Functions
# List all snapshots
function list_snapshots() {
    echo "Available snapshots in $SNAPSHOT_DIR:"
    ls "$SNAPSHOT_DIR" | grep "snapshot" || echo "No snapshots found."
}



# Display usage information
function show_usage() {
    echo "Usage: $0 [command] [arguments]"
    echo "Commands:"
    echo "  create <comment>       Create a new snapshot with an autogenerated name"
    echo "  delete <name|range>    Delete a specific snapshot or a range (e.g., 1-5)"
    echo "  edit <name>            Edit details of a specific snapshot"
    echo "  list                   List all snapshots"
    echo "  setup-hook             Set up pacman hook for automatic snapshots"
    exit 1
}

# Generate snapshot name
function generate_snapshot_name() {
    local timestamp=$(date +"%Y%m%d%H%M%S")
    echo "snapshot-${timestamp}"
}

# Create a new snapshot
function create_snapshot() {
    local comment="$1"
    local snapshot_name=$(generate_snapshot_name)

    if [ -z "$comment" ]; then
        echo "Error: Please provide a comment for the snapshot."
        exit 1
    fi

    # Create snapshot
    btrfs subvolume snapshot "$ROOT_SUBVOL" "$SNAPSHOT_DIR/$snapshot_name"
    
    # Create systemd-boot entry
    local entry_file="${BOOT_LOADER_DIR}/${snapshot_name}.conf"
    {
        echo "title ${snapshot_name}"
        echo "linux /vmlinuz-linux"
        echo "initrd /initramfs-linux.img"
        echo "options root=UUID=${UUID} rw rootflags=subvol=@.snapshots/${snapshot_name}"
        echo "# Snapshot created on $(date) for: ${comment}"
    } > "$entry_file"

    # Update boot menu with new snapshot entry
    update_boot_menu

    echo "Snapshot created: $snapshot_name"
    echo "Systemd-boot entry created: $entry_file"
}

# Delete snapshots
function delete_snapshot() {
    local name_or_range="$1"

    if [[ "$name_or_range" =~ ^[0-9]+-[0-9]+$ ]]; then
        # Delete range of snapshots
        local start=$(echo "$name_or_range" | cut -d'-' -f1)
        local end=$(echo "$name_or_range" | cut -d'-' -f2)
        local count=1

        for snapshot in $(ls "$SNAPSHOT_DIR" | grep "snapshot"); do
            if ((count >= start && count <= end)); then
                echo "Deleting snapshot: $snapshot"
                btrfs subvolume delete "$SNAPSHOT_DIR/$snapshot"
                rm -f "${BOOT_LOADER_DIR}/${snapshot}.conf"
            fi
            ((count++))
        done
    else
        # Delete specific snapshot
        echo "Deleting snapshot: $name_or_range"
        btrfs subvolume delete "$SNAPSHOT_DIR/$name_or_range"
        rm -f "${BOOT_LOADER_DIR}/${name_or_range}.conf"
    fi

    # Update boot menu after deleting a snapshot
    update_boot_menu
}

# Update the boot menu
function update_boot_menu() {
    local snapshot_entries="${BOOT_LOADER_DIR}/snapshots.conf"
    {
        echo "Archlinux"
        echo "Archlinux (fallback initramfs)"
        echo ""
        echo "Snapshots:"
        printf "%-5s %-25s %-30s\n" "ID" "Name" "Description"
        printf "%-5s %-25s %-30s\n" "===" "=========================" "=============================="
        local count=1
        for snapshot in $(ls "$SNAPSHOT_DIR" | grep "snapshot"); do
            local entry_file="${BOOT_LOADER_DIR}/${snapshot}.conf"
            local description="No description"
            if [ -f "$entry_file" ]; then
                description=$(grep '#' "$entry_file" | cut -d':' -f2 | xargs)
            fi
            printf "%-5d %-25s %-30s\n" "$count" "$snapshot" "$description"
            ((count++))
        done
    } > "$snapshot_entries"
}

function setup_pacman_hook() {
    local hook_dir="/etc/pacman.d/hooks"
    local hook_file="${hook_dir}/btrfs-snapshot.hook"

    # Ensure hook directory exists
    mkdir -p "$hook_dir"

    # Write pacman hook
    cat <<EOF > "$hook_file"
[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Package
Target = *

[Action]
Description = Creating a pre-transaction Btrfs snapshot...
When = PreTransaction
Exec = /usr/local/bin/$(basename "$0") create "Pacman pre-transaction snapshot"
EOF

    echo "Pacman hook created at: $hook_file"
    echo "Snapshots will be created automatically before package transactions."
}

# Main logic
case "$1" in
    create)
        create_snapshot "$2"
        ;;
    delete)
        delete_snapshot "$2"
        ;;
    edit)
        edit_snapshot "$2"
        ;;
    list)
        list_snapshots
        ;;
    setup-hook)
        setup_pacman_hook
        ;;
    *)
        show_usage
        ;;
esac
